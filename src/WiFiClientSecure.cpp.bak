#include "ArduinoFake.h"
#include "WiFiClientSecure.h"

int WiFiClientSecure::connect(IPAddress ip, uint16_t port, const char *rootCABuff, const char *cli_cert, const char *cli_key)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(ip, port, rootCABuff, cli_cert, cli_key);
}

int WiFiClientSecure::connect(const char *host, uint16_t port, const char *rootCABuff, const char *cli_cert, const char *cli_key)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(host, port, rootCABuff, cli_cert, cli_key);
}

int WiFiClientSecure::connect(IPAddress ip, uint16_t port, const char *pskIdent, const char *psKey)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(ip, port, pskIdent, psKey);
}

int WiFiClientSecure::connect(const char *host, uint16_t port, const char *pskIdent, const char *psKey)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(host, port, pskIdent, psKey);
}

int WiFiClientSecure::lastError(char *buf, const size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->lastError(buf, size);
}

void WiFiClientSecure::setInsecure()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setInsecure();
}

void WiFiClientSecure::setPreSharedKey(const char *pskIdent, const char *psKey)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setPreSharedKey(pskIdent, psKey);
}

void WiFiClientSecure::setCACert(const char *rootCA)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setCACert(rootCA);
}

void WiFiClientSecure::setCertificate(const char *client_ca)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setCertificate(client_ca);
}

void WiFiClientSecure::setPrivateKey(const char *private_key)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setPrivateKey(private_key);
}

bool WiFiClientSecure::loadCACert(Stream& stream, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->loadCACert(stream, size);
}

bool WiFiClientSecure::loadCertificate(Stream& stream, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->loadCertificate(stream, size);
}

bool WiFiClientSecure::loadPrivateKey(Stream& stream, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->loadPrivateKey(stream, size);
}

bool WiFiClientSecure::verify(const char* fingerprint, const char* domain_name)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->verify(fingerprint, domain_name);
}

void WiFiClientSecure::setHandshakeTimeout(unsigned long handshake_timeout)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setHandshakeTimeout(handshake_timeout);
}

int WiFiClientSecure::socket()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->socket();
}


/*
int WiFiClientSecure::connect(IPAddress ip, uint16_t port)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(ip, port);
}

int WiFiClientSecure::connect(IPAddress ip, uint16_t port, int32_t timeout)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(ip, port, timeout);
}

int WiFiClientSecure::connect(const char *host, uint16_t port)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(host, port);
}

int WiFiClientSecure::connect(const char *host, uint16_t port, int32_t timeout)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connect(host, port, timeout);
}

size_t WiFiClientSecure::write(uint8_t data)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->write(data);
}

size_t WiFiClientSecure::write(const uint8_t *buf, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->write(buf, size);
}

size_t WiFiClientSecure::write_P(PGM_P buf, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->write_P(buf, size);
}

size_t WiFiClientSecure::write(Stream &stream)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->write(stream);
}

int WiFiClientSecure::available()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->available();
}

int WiFiClientSecure::read()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->read();
}

int WiFiClientSecure::read(uint8_t *buf, size_t size)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->read(buf, size);
}

int WiFiClientSecure::peek()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->peek();
}

void WiFiClientSecure::flush()
{
    ArduinoFakeInstance(WiFiClientSecure, this)->flush();
}

void WiFiClientSecure::stop()
{
    ArduinoFakeInstance(WiFiClientSecure, this)->stop();
}

uint8_t WiFiClientSecure::connected()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->connected();
}

int WiFiClientSecure::fd() const
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->fd();
}


int WiFiClientSecure::setSocketOption(int option, char* value, size_t len)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setSocketOption(option, value, len);
}

int WiFiClientSecure::setOption(int option, int *value)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setOption(option, value);
}

int WiFiClientSecure::getOption(int option, int *value)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->getOption(option, value);
}

int WiFiClientSecure::setTimeout(uint32_t seconds)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setTimeout(seconds);
}

int WiFiClientSecure::setNoDelay(bool nodelay)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->setNoDelay(nodelay);
}

bool WiFiClientSecure::getNoDelay()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->getNoDelay();
}


IPAddress WiFiClientSecure::remoteIP()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->remoteIP();
}

IPAddress WiFiClientSecure::remoteIP(int fd)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->remoteIP(fd);
}

uint16_t WiFiClientSecure::remotePort()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->remotePort();
}

uint16_t WiFiClientSecure::remotePort(int fd)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->remotePort(fd);
}

IPAddress WiFiClientSecure::localIP()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->localIP();
}

IPAddress WiFiClientSecure::localIP(int fd)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->localIP(fd);
}

uint16_t WiFiClientSecure::localPort()
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->localPort();
}

uint16_t WiFiClientSecure::localPort(int fd)
{
    return ArduinoFakeInstance(WiFiClientSecure, this)->localPort(fd);
}
*/
